// Copyright (c) 2023 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef ROCRAND_BENCHMARK_TUNING_SETUP_HPP_
#define ROCRAND_BENCHMARK_TUNING_SETUP_HPP_

#include <array>

namespace benchmark_tuning
{

template<class... Ts>
constexpr auto unsigned_array(const Ts... args)
{
    return std::array{static_cast<unsigned int>(args)...};
}

// clang-format off
constexpr inline unsigned int min_benchmarked_grid_size = @BENCHMARK_TUNING_MIN_GRID_SIZE@;
constexpr inline auto thread_options = unsigned_array(@BENCHMARK_TUNING_THREAD_OPTIONS@);
constexpr inline auto block_options = unsigned_array(@BENCHMARK_TUNING_BLOCK_OPTIONS@);
// clang-format on

} // namespace benchmark_tuning

#endif // ROCRAND_BENCHMARK_TUNING_SETUP_HPP_
